local template = require("resty.template")
local discount = require("discount")

local webstats = {}
webstats.__index = webstats
setmetatable(webstats, {__call = function(self, ...) return self.new(...) end})

--
-- Configuration
--
--      webstats = {
--          driver = "webstats",
--          wwwdir = "/var/www",
--          blogfile = "/var/gardend/microblog.lua",
--          stats_variables = {
--              {name = "tray_temperature", units = "C", description = "Tray Temperature"},
--              {name = "tray_humidity", units = "%", description = "Tray Humidity"},
--              {name = "tray_light", units = "lux", description = "Tray Light"},
--              {name = "heatmat_state", units = "(on/off)", description = "Heatmat State"},
--              {name = "growlight_state", units = "(on/off)", description = "Growlight State"},
--          },
--          plot_utc_offset = -8,
--          plot_width = 600,
--          plot_height = 1000,
--          plot_variables = {
--              {name = "tray_temperature", duration = 8*60*60},
--              {name = "tray_humidity", duration = 8*60*60},
--              {name = "tray_light", duration = 8*60*60},
--              {name = "heatmat_state", duration = 8*60*60},
--              {name = "growlight_state", duration = 8*60*60},
--          },
--      }
--
--
-- Web File Structure
--
--      wwwdir/index.html (generated by this block)
--      wwwdir/microblog.xml (generated by this block)
--      wwwdir/plot.png (generated by this  block)
--      wwwdir/webstats.css (copy from postprocessors/webstats.css)
--      wwwdir/webcam.png (generated from webcam input block)
--

function webstats.new(configuration)
    local self = setmetatable({}, webstats)

    if configuration.wwwdir == nil then
        error("missing wwwdir in configuration")
    elseif configuration.blogfile == nil then
        error("missing blogfile in configuration")
    elseif configuration.stats_variables == nil then
        error("missing stats_variables in configuration")
    elseif configuration.plot_utc_offset == nil then
        error("missing plot_utc_offset in configuration")
    elseif configuration.plot_width == nil then
        error("missing plot_width in configuration")
    elseif configuration.plot_height == nil then
        error("missing plot_height in configuration")
    elseif configuration.plot_variables == nil then
        error("missing plot_variables in configuration")
    end

    self.template = require("resty.template")
    self.template.caching(false)
    self.template.print = function (s)
        local f = assert(io.open(self.wwwdir .. "/index.html", 'w'))
        f:write(s)
        f:close()
    end

    self.wwwdir = configuration.wwwdir
    self.templatefile = debug.getinfo(1, "S").source:sub(2):gsub("init.lua","webstats.html")
    print(self.templatefile)
    self.blogfile = configuration.blogfile
    self.stats_variables = configuration.stats_variables
    self.plot_utc_seconds_offset = configuration.plot_utc_offset*60*60
    self.plot_width = configuration.plot_width
    self.plot_height = configuration.plot_height
    self.plot_variables = configuration.plot_variables

    return self
end

local function loadblog(path)
    local f = assert(io.open(path, 'r'))
    local t = f:read('*all')
    f:close()
    local env = {}
    load(t, nil, 't', env)()

    -- Run blog content through markdown
    for _, entry in ipairs(env.blog) do
        entry.content = discount(entry.content)
    end

    return env.blog
end

function webstats:plot(state)
    -- Look up past data
    local xdatas = {}
    local ydatas = {}

    for plot_index, plot_variable in ipairs(self.plot_variables) do
        local xdata = {}
        local ydata = {}

        -- Collect current and past data
        local i = 0
        while state[i].timestamp ~= nil and (state.timestamp - state[i].timestamp) < plot_variable.duration do
            local value = state[i][plot_variable.name]

            -- Convert booleans to integers
            if type(value) == "boolean" then
                value = value and 1 or 0
            end

            table.insert(xdata, 1, state[i].timestamp + self.plot_utc_seconds_offset)
            table.insert(ydata, 1, value)
            i = i - 1
        end

        xdatas[#xdatas + 1] = xdata
        ydatas[#ydatas + 1] = ydata
    end

    -- Prepare script
    local script = {}

    local function append(setting)
        script[#script + 1] = setting
    end

    append(string.format('set terminal pngcairo transparent truecolor noenhanced size %d, %d font "Arial,8"', self.plot_width, self.plot_height))
    -- Output
    append('set output "/tmp/gardend_plot.png"')
    -- Mulitplot Setup
    append(string.format('set multiplot layout %d, 1', #ydatas))
    -- X Input
    append('set timefmt "%s"')
    append('set xdata time')
    -- X Tick Format
    append('set format x "%H:%M"')
    -- Style
    append('set border lw 2 lc rgb "white"')
    append('set xtics textcolor rgb "white"')
    append('set ytics textcolor rgb "white"')
    append('set xlabel textcolor rgb "white"')
    append('set ylabel textcolor rgb "white"')
    append('set key textcolor rgb "white"')
    append('set title textcolor rgb "white"')
    append('set lmargin 6')
    -- Plot Commands
    for i = 1, #self.plot_variables do
        -- Plot title
        append(string.format('set title "%s"', self.plot_variables[i].name))
        -- X Axis Range
        append(string.format('set xrange ["%d":"%d"]', xdatas[i][1]-5, xdatas[i][#xdatas[i]]+5))
        -- Handle yrange and ytics appropriately for boolean versus number values
        if type(state[self.plot_variables[i].name]) == "boolean" then
            append('unset yrange')
            append('set yrange [-0.5 : 1.5]')
            append('unset ytics')
            append('set ytics ("false" 0, "true" 1)')
        else
            append('unset yrange')
            append('set yrange [*:*]')
            append('unset ytics')
            append('set ytics')
        end
        -- Disable key
        append('unset key')
        -- Plot
        append(string.format('plot "/tmp/gardend_plot%d_data" using 1:2 with linespoints', i))
    end

    -- Write plot data
    for i = 1, #self.plot_variables do
        local f = assert(io.open(string.format("/tmp/gardend_plot%d_data", i), "w"))
        for j = 1, #xdatas[i] do
            if ydatas[i][j] ~= nil then
                f:write(xdatas[i][j] .. "\t" .. ydatas[i][j] .. "\n")
            end
        end
        f:close()
    end

    -- Write plot script
    local f = assert(io.open("/tmp/gardend_plot_script", "w"))
    f:write(table.concat(script, "\n"))
    f:close()

    -- Execute gnuplot
    local result, exit, code = assert(os.execute("gnuplot /tmp/gardend_plot_script"))

    -- Move the file to the plot file
    local result, exit, code = assert(os.execute("mv /tmp/gardend_plot.png " .. self.wwwdir .. "/plot.png"))
end

local function read_process(cmd)
    local f = io.popen(cmd)
    local s = f:read("*a")
    assert(f:close())
    -- Trim trailing newline
    return s:sub(1, #s-1)
end

local function read_uptime()
    local f = assert(io.open("/proc/uptime"))
    local s = f:read("*a")
    f:close()

    -- Convert the first field into a number
    local uptime = tonumber(s:sub(1, (s:find(" "))-1))

    return uptime
end

local function time_delta_to_string(delta)
    local weeks = math.floor(delta/604800.0)
    delta = delta - weeks*604800
    local days = math.floor(delta/86400.0)
    delta = delta - days*86400
    local hours = math.floor(delta/3600)
    delta = delta - hours*3600
    local minutes = math.floor(delta/60)
    delta = delta - minutes*60
    local seconds = delta

    return string.format("%d weeks, %d days, %d hours, %d minutes, %d seconds", weeks, days, hours, minutes, seconds)
end

function webstats:process(state)
    -- Load blog
    local blog = loadblog(self.blogfile)

    -- Render plots
    self:plot(state)

    -- Collect system info
    local sysinfo_variables = {
        {name = "gardend version", value = GARDEND_VERSION},
        {name = "gardend configuration", value = GARDEND_CONFIG_NAME},
        {name = "gardend timestep", value = GARDEND_TIMESTEP .. " seconds"},
        {name = "gardend garden start", value = os.date("%c", state[-state:count()].timestamp)},
        {name = "gardend garden age", value = time_delta_to_string(state.timestamp - state[-state:count()].timestamp)},
        {name = "gardend uptime", value = time_delta_to_string(state.timestamp - GARDEND_START_TIME)},
        {name = "system uptime", value = time_delta_to_string(read_uptime())},
        {name = "system uname", value = read_process('uname -a')},
    }

    -- Render template
    self.template.render(self.templatefile, {blog = blog, stats_variables = self.stats_variables, plot_variables = self.plot_variables, sysinfo_variables = sysinfo_variables, state = state})
end

return webstats
